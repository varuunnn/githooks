name: SQL Safety Check

on:
  pull_request:
    branches:
      - main

jobs:
  check-sql:
    name: Check for Dangerous SQL in PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get list of changed SQL files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: '**/*.sql'

      - name: Scan SQL files for unsafe statements
        run: |
          found=0
          echo "üîç Checking SQL files for dangerous statements..."

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "üìÇ Scanning: $file"
            line_number=0
            inside_update=0
            update_sql=""
            update_start_line=0

            while IFS= read -r line || [[ -n "$line" ]]; do
              line_number=$((line_number + 1))
              trimmed_line="$(echo "$line" | sed 's/^[ \t]*//' | tr '[:upper:]' '[:lower:]')"

              # Skip comments and blank lines
              [[ "$trimmed_line" == --* || -z "$trimmed_line" ]] && continue

              # Detect dangerous standalone keywords
              if echo "$trimmed_line" | grep -Eiq '\b(delete|drop|truncate)\b'; then
                echo "‚ùå Dangerous SQL keyword found at $file:$line_number"
                echo "   -> $line"
                found=1
              fi

              # Start of UPDATE statement
              if [[ $inside_update -eq 0 && "$trimmed_line" =~ ^update[[:space:]] ]]; then
                inside_update=1
                update_sql="$line"
                update_start_line=$line_number
                continue
              fi

              # Continue accumulating UPDATE block
              if [[ $inside_update -eq 1 ]]; then
                update_sql="$update_sql $line"

                # If line ends with ; then check the full statement
                if [[ "$trimmed_line" == *\; ]]; then
                  if ! echo "$update_sql" | grep -Eiq '\bwhere\b'; then
                    echo "‚ùå UPDATE without WHERE at $file:$update_start_line"
                    echo "   -> $update_sql"
                    found=1
                  fi
                  inside_update=0
                  update_sql=""
                  update_start_line=0
                fi
              fi
            done < "$file"

            # Final check in case file ends without semicolon
            if [[ $inside_update -eq 1 ]]; then
              if ! echo "$update_sql" | grep -Eiq '\bwhere\b'; then
                echo "‚ùå UPDATE without WHERE at EOF in $file (starting at line $update_start_line)"
                echo "   -> $update_sql"
                found=1
              fi
            fi
          done

          if [[ $found -eq 1 ]]; then
            echo "‚ùå SQL safety check failed!"
            exit 1
          else
            echo "‚úÖ All SQL checks passed."
          fi
