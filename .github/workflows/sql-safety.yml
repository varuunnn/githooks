name: SQL Safety Check

on:
  pull_request:
    branches:
      - main

jobs:
  check-sql:
    name: Check for Dangerous SQL in PR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get list of changed SQL files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: '**/*.sql'

      - name: Scan SQL files for DELETE, DROP, TRUNCATE, or unsafe UPDATEs
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --no-cache-dir regex
          python3 -c "
import re
import sys

# Keywords to check for dangerous SQL statements
keywords = r'(?i)\b(delete|drop|truncate)\b'
update_pattern = r'(?i)^update\s+\w+\s+set'

# Function to check if an UPDATE statement is unsafe
def check_update(statement, line_number):
    # Normalize and remove extra spaces to handle multi-line
    statement = ' '.join(statement.split())
    # Check if 'WHERE' is present in the statement
    if 'where' not in statement.lower():
        print(f'⚠️ UPDATE without WHERE at line {line_number}')
        print(f'  -> {statement}')
        return True
    return False

def scan_sql_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    inside_update = False
    update_statement = []
    line_number = 0
    found = False

    for line in lines:
        line_number += 1
        line = line.strip()

        # Skip empty lines and comments
        if not line or line.startswith('--'):
            continue

        # Check for DELETE, DROP, TRUNCATE
        if re.search(keywords, line):
            print(f'⚠️ Dangerous SQL found at {file_path}:{line_number}')
            print(f'  -> {line}')
            found = True

        # Check for UPDATE statements
        if re.match(update_pattern, line, re.IGNORECASE):
            if inside_update:  # If inside an UPDATE, we should already have accumulated a statement
                if check_update(update_statement, line_number):
                    found = True
            inside_update = True
            update_statement = [line]
            continue

        # Accumulate UPDATE statement across multiple lines
        if inside_update:
            update_statement.append(line)
            if line.endswith(";"):  # End of an UPDATE statement
                if check_update(update_statement, line_number):
                    found = True
                inside_update = False
                update_statement = []

    return found

# Iterate over changed files and check for dangerous SQL
files = sys.argv[1].split()
found_issues = False
for file in files:
    if file.endswith('.sql') and scan_sql_file(file):
        found_issues = True

if found_issues:
    sys.exit(1)
else:
    print('✅ All SQL checks passed.')
"
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
